зачастую	разработчик	особенно	неопытный	теряться	когда	они	просить	обозначить	срок	выполнение	задача	однако	умение	планировать	очень	полезный	и	нужный	навык	который	помогать	не	только	в	работа	но	и	в	жизнь	мы	решить	узнать	у	эксперт	как	научиться	правильно	планировать	и	сдавать	проект	вовремя	краткий	вывод	можно	посмотреть	в	конец	статья	разработчик	обычно	требоваться	учесть	сразу	несколько	параметр	чтобы	оценить	время	выполнение	задача	чтобы	научиться	адекватно	оценивать	срок	работа	нужно	постоянно	практиковаться	в	начало	свой	работа	я	поступать	именно	так	оценивать	время	на	выполнение	люба	входящая	задача	даже	если	это	никто	не	требовать	а	потом	смотреть	насколько	точно	удаться	попасть	в	свой	оценка	в	процесс	выполнение	задача	отмечать	какой	действие	занимать	большой	время	если	что	то	сильно	увеличивать	срок	запоминать	этот	момент	и	учитывать	он	в	следующий	оценка	к	объективный	оценка	время	нужный	чисто	на	работа	следовать	прибавлять	небольшой	запас	для	покрытие	форс	мажорный	ситуация	он	часто	оценивать	в	процент	от	выполнение	основной	задача	но	у	весь	он	разный	кто	то	прибавлять		время	кто	то		а	кто	то		полезно	также	анализировать	причина	срыв	срок	после	каждый	нарушение	дедлайна	если	не	хватить	квалификация	нужно	поработать	над	свой	слабый	местами	если	проблема	быть	организационный	понять	что	помешать	нормальный	работать	методика	оценка	проект	включая	длительность	работа	и	отдельный	задача	посвятить	большой	количество	стать	однако	до	сей	пора	это	являться	причина	возникновение	конфликт	как	внутри	проектный	команда	так	и	при	общение	с	заказчик	основной	помощник	в	оценка	опыт	попробовать	как	то	сопоставить	новый	задача	с	уже	сделать	если	вы	делать	посмотреть	сколько	по	время	занять	похожий	в	прошлое	если	вы	делать	что	то	новое	попробовать	разбить	на	известный	часть	и	оценить	они	если	задача	совсем	новый	выделить	время	на	изучение	хороший	согласовать	это	время	с	тем	кто	ставить	задача	обратить	внимание	на	сопутствующий	этап	если	нужно	разработать	сервис	то	в	оценка	необходимый	включить	также	и	юнит	тестирование	а	мочь	и	не	только	юнит		время	подготовка	тестовый	дать	следовать	продумать	интеграция	с	другой	сервис	и	том	далее	заложить	время	на	исправление	дефект	который	вы	самостоятельно	или	с	помощь	тестировщик	много	время	мочь	утекать	в	задача	например	есть	оценка	по	разработка	и	есть	оценка	по	тестирование	но	передача	артефакт	на	тестирование	мочь	быть	сопрячь	с	разворачивание	стенд	поэтому	важный	мысленно	себя	представить	весь	процесс	чтобы	ничто	не	упустить	после	определение	необходимый	включить	новое	работа	в	календарь	не	забыть	про	другой	задача	и	активность	который	идти	параллельно	и	не	забывать	что	план	бесполезный	но	планирование	бесценный	учиться	вовремя	корректировать	план	держать	в	курс	весь	заинтересовать	и	своевременно	эскалировать	чтобы	провалить	срок	не	оказаться	ни	для	кто	неожиданность	вопрос	на	который	невозможно	ответить	в	краткий	форма	если	бы	это	быть	просто	то	проблема	нарушение	срок	не	существовать	бы	чтобы	сделать	срок	окончание	разработка	более	предсказуемый	надо	сначала	понять	причина	по	который	программист	постоянно	ошибаться	один	причина	большинство	задача	который	делать	программист	являться	в	тот	или	иной	степень	уникальный	то	есть	скорее	всего	программист	быть	делать	подобный	задача	в	один	раз	он	недостаточно	хорошо	представлять	сколько	занять	этот	работа	если	это	программист	с	солидный	опыт	и	он	приходиться	выполнять	подобный	задача	он	оценка	быть	близкий	к	реальность	прибегнуть	к	простой	аналогия	если	вы	никогда	не	копать	канава	вы	не	мочь	точно	сказать	сколько	время	у	вы	занять	выкопать	траншея	сантиметр	ширина	сантиметр	глубина	и	метр	длинный	если	вы	ранний	копать	оценка	время	работа	у	вы	быть	гораздо	близкий	к	фактический	длительность	работа	два	причина	программист	по	свой	природа	оптимист	то	есть	рассматривать	задача	подбирать	для	вариант	реализация	давать	оценка	доработка	разработчик	ожидать	что	быть	работать	так	как	он	предполагать	и	не	думать	о	тот	проблема	что	он	встретиться	на	путь	зачастую	он	и	не	мочь	они	предвидеть	например	есть	задача	который	программист	мочь	реализовать	использовать	сторонний	программный	библиотека	на	этап	оценка	он	найти	в	интернет	прочитать	описание	она	он	подходить	и	он	даже	верно	оценить	свой	работа	чтобы	встроить	использование	этот	библиотека	но	он	совсем	не	предусмотреть	что	в	окружение	он	программный	продукт	в	этот	библиотека	возникнуть	ошибка	разработчик	не	только	встроить	использование	библиотека	в	свой	код	но	и	исправить	ошибка	в	самый	библиотека	а	зачастую	разработчик	не	предусматривать	время	на	исправление	свой	ошибка	как	показывать	статистика	тестирование	и	исправление	ошибка	мочь	занимать	порядок		от	время	что	быть	затратить	на	кодинга	цифра	зависеть	от	квалификация	разработчик	окружение	использовать	практика	разработка	например	юнит	тест	существенно	это	время	сокращать	и	итоговый	длительность	задача	по	разработка	получаться	маленький	если	вернуться	к	аналогия	с	землекоп	то	землекоп	не	предполагать	что	у	он	сломаться	лопата	и	потратить	два	час	на	поиск	новое	черенок	три	причина	непредусмотренный	требование	ни	в	один	область	материальный	производство	с	который	так	любить	сравнивать	заказчик	разработка	по	нет	такой	поток	новый	требование	представить	себя	пассаж	землекоп	который	выкопать	метр	из	и	услышать	от	заказчик	пожелание	чтобы	канава	идти	не	по	прямая	а	змейка	с	длина	плечо	сантиметр	как	с	весь	это	бороться	и	как	жить	в	условие	подобный	уменьшать	и	закладывать	резерв	время	самый	простой	способ	привести	свой	ожидание	близкий	к	реальность	это	использовать	шутливый	эмпирический	правило	получить	оценка	от	разработчик	по	срок	или		надо	умножить	на	число	пи			чем	более	опытный	разработчик	делать	оценка	тем	маленький	мочь	быть	этот	коэффициент	обязательный	являться	практика	декомпозиция	исходный	задача	до	маленькая	задача	размер	не	более	часы	чем	детальный	выполнить	декомпозиция	тем	выше	шанс	что	оценка	оказаться	близкий	к	фактический	длительность	вернуться	к	выделение	резерв	это	время	должный	быть	выделить	в	конец	проект	плохой	практика	делать	резерв	и	включать	он	для	каждый	задача	закон	паркинсон	заполнять	время	отпустить	на	выполняться	неукоснительно	если	подвести	краткий	то	чтобы	правильно	определить	срок	выполнение	работа	полезный	быть	следующий	действие	ну	и	помнить	что	если	факт	превышать	ваш	оценка	на		то	это	очень	хороший	результат	для	максимально	точный	оценка	нужный	опыт	реальный	разработка	именно	в	конкретный	область	но	есть	и	общий	правило	который	помочь	избежать	ошибка	в	планирование	и	проблема	при	сдача	работа	заказчик	я	бы	описать	этот	правило	так	в	один	нужно	понять	задача	это	вроде	бы	очевидно	и	не	относиться	напрямую	к	оценка	срок	но	на	самый	дело	это	ключевой	момент	даже	в	крупный	проект	один	из	основный	фактор	неудача	и	затягивание	срок	являться	проблема	в	определение	требование	у	начинающий	разработчик	к	сожаление	это	проблема	не	читать	тз	или	читать	и	понимать	очень	избирательно	из	десять	пункт	запомнить	и	выполнить	пять	а	про	остаться	вспомнить	уже	при	сдача	результат		понятно	что	неправильно	понять	задача	невозможно	правильно	реализовать	в	срок	далее	оценить	сам	время	на	разработка	особенность	программирование	в	тот	что	не	бывать	абсолютно	одинаковый	задача	это	делать	наш	работа	интересный	но	оценка	срок	сложный	здесь	хорошо	работать	декомпозиция	том	е	разделение	сложный	уникальный	задача	на	последовательность	маленькая	знакомый	подзадача	а	каждый	из	они	уже	можно	оценить	в	часы	достаточно	адекватно	сложить	оценка	подзадача	и	получить	оценка	весь	задача	как	правило	такой	оценка	включать	в	себя	только	затрата	непосредственно	на	кодирование	это	безусловно	самый	важный	часть	разработка	но	далеко	не	единственный	а	часто	и	не	самый		полный	выполнение	задача	включать	в	себя	ещё	чтение	и	прояснение	тз	встреча	с	коллега	или	заказчик	отладка	и	тестирование	составление	документация	сдача	результат	демонстрация	заказчик	и	возможный	переделка	по	он	замечание		сколько	именно	время	у	вы	на	этот	действие	подсказать	только	опыт	на	один	пора	важный	как	минимум	не	забыть	они	учесть	в	а	примерный	оценка	время	можно	спросить	у	более	опытный	коллега	итак	мы	оценка	трудозатрата	на	кодирование	добавлять	оценка	затрата	на	дополнительный	работа	и	получать	искомый	оценка	время	на	выполнение	задача	но	и	это	не	нужно	обозначить	планировать	дата	завершение	задача	ошибка	быть	просто	взять	и	разделить	трудозатрата	в	часы	на	часы	и	прибавить	к	текущий	дата	в	реальный	практика	разработчик	никогда	ну	ладный	почти	никогда	не	работать	время	над	один	конкретный	задача	у	вы	обязательно	быть	уходить	время	на	другой	работа	важный	но	не	связанный	напрямую	с	главный	например	помощь	коллега	обучение	составление	и	том	плата	обычно	при	планирование	считать	что	непосредственно	на	работа	над	текущий	проект	уходить	рабочий	время	дополнительно	надо	учесть	возможный	задержка	который	не	дать	вы	непрерывно	работать	над	задача	например	если	для	это	вы	нужно	взаимодействовать	с	другой	человек	коллега	заказчик		то	учитывать	они	занятость	график	работа	и	том	плата	вот	основной	правило	который	на	мой	взгляд	помочь	разработчик	избежать	проблема	в	оценка	и	соблюдение	срок	кроме	это	ключевой	являться	накопление	собственный	опыт	как	в	реализация	задача	так	и	в	оценка	например	очень	полезно	после	завершение	задача	сравнивать	свой	первоначальный	оценка	с	фактический	срок	и	делать	вывод	на	будущее	и	конечно	стоить	изучить	чужой	опыт	я	бы	порекомендовать	по	тема	книга	с	макконнелла	стоить	программный	и	с	архипенков	по	управление	программный	при	оценка	и	планирование	срок	необходимый	в	наш	компания	планирование	задача	всегда	проходить	несколько	этап	на	сторона	бизнес	мы	формулировать	стратегический	цель	на	год	это	высокоуровневый	задача	например	повысить	какой	либо	параметр	на	столько	то	процент	далее	различный	подразделение	компания	формировать	бизнес	задача	на	весь	команда	ит	срок	по	это	задача	получать	первичный	грубый	оценка	который	часто	формироваться	весь	участник	команда	менеджер	аналитик	разработчик	и	тестировщик	получить	этот	оценка	бизнес	приоритезировать	задача	учитывать	стратегический	цель	компания	в	это	помогать	сквозной	стратегический	цель	с	они	становиться	очевидно	что	весь	мы	работать	на	какой	то	общий	дело	нет	такой	ситуация	когда	кто	то	тянуть	только	в	свой	сторона	из	точно	оценить	по	срок	задача	мы	собирать	спринт	у	некоторый	команда	они	квартальный	у	некоторый	месячный	несколько	задача	по	предварительный	оценка	попадать	в	следующий	спринт	команда	давать	точный	оценка	крупный	задача	разбиваться	на	более	низкоуровневый	за	каждый	из	который	отвечать	конкретный	исполнитель	именно	он	и	точный	оценка	на	дать	этап	важный	не	забывать	добавлять	запас	время	на	исправление	баг	ведь	не	ошибаться	только	тот	кто	ничто	не	делать	это	прекрасно	понимать	и	и	бизнес	заказчик	при	это	требовать	запас	время	должный	быть	адекватный	никто	не	разработчик	который	поставить	простой	задача	слишком	длинный	срок	исполнение	он	попросить	обосновать	решение	самый	сложный	объяснить	бизнес	зачем	нужно	время	на	рефакторинг	мы	благодарный	наш	компания	за	то	что	периодически	мы	это	ведь	в	конечный	рефакторинг	к	облегчение	инфраструктура	и	наведение	порядок	в	код	что	повышать	стабильность	система	и	мочь	существенно	ускорить	разработка	новый	функция	иногда	ошибка	в	оценка	же	возникать	отдел	разработка	в	крупный	компания	с	развитый	инфраструктура	полностью	избежать	это	на	мой	взгляд	невозможно	в	дать	случай	важный	чтобы	разработчик	вовремя	информировать	о	происходить	свой	менеджер	а	тот	в	свой	очередь	успеть	предупредить	бизнес	и	что	то	в	общий	план	компания	в	такой	режим	работать	намного	более	правильно	чем	судорожно	пытаться	сделать	за	день	то	что	занимать	а	потом	утонуть	в	большой	количество	ошибка	возникнуть	из	за	подобный	спешка	правильный	ответ	на	оба	часть	как	научиться	правильно	планировать	и	сдавать	проект	вовремя	ред		опыт	другой	путь	не	существовать	согласно	теория	принятие	решение	сколько	нибыть	точный	умозаключение	можно	строить	только	на	основа	анализ	ряд	уже	иметься	дать	и	чем	большой	этот	дать	тем	точнее	итоговый	прогноз	и	оценка	говорить	слово	герберт	шоу	это	школа	в	который	человек	какой	дурак	он	быть	отсюда	следовать	достаточно	простой	вывод	если	у	программист	уже	есть	коррелировать	с	поставить	задача	опыт	он	мочь	опереться	на	он	если	нет	на	опыт	по	далее	нужно	понимать	что	прямой	планирование	срок	задача	с	который	человек	справляться	очень	и	очень	плохо	особенно	в	разработка	при	оценка	срок	сдача	хорошеть	практика	считаться	введение	на	исходный	оценка	дать	метрика	мочь	колебаться	в	интервал	от	до	в	зависимость	от	опыт	разработчик	и	совокупность	степень	задача	решать	в	рамка	проект	при	определение	срок	важный	учитывать	многие	фактор	например	опыт	работа	насколько	вы	представлять	себя	предстоящий	работа	делать	ли	ранее	что	то	подобный	понятно	что	чем	большой	опыт	тем	быстрый	работа	быть	выполнить	немалый	роль	в	определение	срок	играть	грамотно	составить	технический	задание	с	это	в	наш	сфера	дело	обстоять	очень	туго	часто	клиент	сам	не	знать	что	хотеть	поэтому	я	советовать	потратить	лишний	день	два	но	добиться	от	клиент	представление	о	желаемый	результат	важный	чтобы	это	представление	быть	обоюдный	и	только	после	это	можно	начинать	оговаривать	сумма	и	срок	также	всегда	закладывать	риска	новичок	я	рекомендовать	предполагать	срок	выполнение	множить	на	два	ведь	хороший	сдать	проект	ранний	срок	и	вырастить	как	специалист	в	глаз	заказчик	нежели	сдать	поздний	и	испортить	свой	репутация	общий	рекомендация	разработчик	необходимый	научиться	правильно	декомпозировать	задача	всегда	искать	возможный	подводный	камень	опираться	на	собственный	опыт	и	не	забывать	вовремя	предупреждать	заказчик	и	коллега	если	в	назвать	срок	задача	решить	не	получаться	выстроить	план	гораздо	сложный	чем	определить	срок	выполнение	отдельно	взять	задача	при	это	важный	не	только	сдать	проект	вовремя	но	и	сделать	так	чтобы	разработать	вы	система	корректно	решать	задача	бизнес	здесь	ит	команда	помогать	различный	методология	разработка	по	от	и	до	и	другой	формат	выбор	инструмент	весьма	обширный	и	многие	наш	заказчик	хотеть	заранее	понимать	как	мы	быть	с	они	работать	в	проект	какой	принцип	мы	придерживаться	к	слово	тема	сегодня	становиться	близкий	и	бизнес	и	даже	в	отдельный	проект	госсектор	поскольку	принцип	этот	методология	позволять	реализовывать	проект	очень	быстро	управлять	ожидание	заказчик	на	каждый	итерация	например	в	команда	практически	не	бывать	затянуться	обсуждение	с	заказчик	забыть	про	десятка	страница	с	описание	ненужный	технический	деталь	например	о	скорость	появление	выпадать	список	дать	заказчик	возможность	попробовать	промежуточный	версия	система	тогда	и	понимать	друг	друг	вы	стать	гораздо	простой	команда	планировать	вместе	и	определять	оптимальный	уровень	трудозатрата	который	понадобиться	для	решение	тот	или	иной	задача	например	один	из	техника	называться	где	каждый	участник	анонимно	свой	оценка	необходимый	трудозатрата	по	конкретный	задача	после	это	команда	определять	средний	вес	задача	в	или	человеко	часы	и	распределять	дело	по	принцип	что	при	это	ежедневно	команда	собираться	на	минутный	митинг	когда	каждый	за	пара	минута	рассказывать	о	статус	свой	текущий	задача	в	тот	число	сообщать	о	возникнуть	трудность	обнаружить	проблема	команда	быстро	устранять	поэтому	и	заказчик	смотреть	на	очередной	этап	работа	программист	максимально	оперативно	разработчик	не	затягивать	с	срок	выполнение	задача	из	за	нежелание	лишний	раз	команда	или	тщетный	попытка	разобраться	самостоятельно	убивать	драгоценный	время	кстати	на	такой	минь	статус	у	разработчик	появляться	желание	проявить	себя	с	хороший	сторона	показать	что	ты	ответственно	подходить	к	работа	это	реально	мотивировать	и	самодисциплинировать	программист	необходимый	научиться	хорошо	вникать	в	текущий	проект	это	самый	важный	нужно	быть	не	только	технически	квалифицировать	специалист	но	и	немножко	менеджер	думать	понимать	какой	именно	элемент	система	затронуть	решение	поставить	задача	насколько	глубоко	затронуть	например	в	какой	то	случай	поменять	строка	код	достаточно	а	в	другой	хороший	переписать	сразу	целый	модуль	также	надо	учитывать	качество	проработка	архитектура	ну	и	понимать	свой	сила	от	умение	составить	и	реализовать	грамотный	решение	до	степень	любовь	к	прокрастинация	и	скорость	печать	когда	весь	навык	и	менеджерский	мышление	складываться	воедино	то	приходить	понимание	срок	выполнение	работа	прежде	всего	необходимый	убедиться	что	вы	правильно	понять	цель	у	вы	и	у	ваш	заказчик	должный	быть	одинаковый	ожидание	от	результат	для	это	полезно	согласовать	так	называть		формулировка	задача	полезно	проверять	на	соответствие	критерий	заложить	в	принцип	задача	необходимый	декомпозировать	на	подзадача	так	чтобы	выполнение	атомарный	задача	быть	не	более	несколько	день	проект	мы	советовать	разбивать	на	этап	двигаться	к	цель	итеративный	и	инкрементальный	в	это	хороший	всего	вы	помочь	гибкий	методология		быть	близкий	к	заказчик	не	уходить	быть	открытый	демонстрировать	промежуточный	результат	с	ценный	для	заказчик	доработка	валидировать	они	соответствие	ожидание	заказчик	не	бояться	изменение	цель	по	мера	продвижение	мочь	уточняться	а	иногда	и	меняться	но	не	перегибать	палка	не	нужно	обращаться	к	заказчик	по	каждый	пустяк	необходимый	обеспечить	для	он	такой	уровень	который	быть	для	он	комфортный	и	напоследок	совет	никогда	не	обещать	тот	что	не	мочь	сделать	не	надеяться	на	чудо	думать	о	внешний	зависимость	и	риска	научиться	управлять	они	и	быть	честный	перед	себя	и	заказчик	напоминать	что	свой	ответ	если	интересный	вопрос	который	уже	задаваться	можно	найти	присоединиться	эксперт	ответ	компания	или	лично	как	это	сделать	загрузка		только	самый	важный	новостив	успешно	подтвердить	свой	подписка	на	и	ждать	первое	письмо	оно	уже	совсем	скоро	и	обзор	самый	важный	из	мир	разработка	даже	не	нужно	переходить	по	ссылка	просто	прочитать	один	письмо	присылать	каждый	день	по	вечер	выглядеть	это	примерно	так		