разработчик	часто	приходиться	принимать	решение	который	повлиять	на	весь	архитектура	приложение	веб	разработчик	важный	выбрать	правильный	место	для	реализация	логика	и	рендеринг	приложение	это	мочь	быть	непросто	так	как	сайт	можно	создать	разный	путь	при	выбор	подход	для	рендеринг	нужно	понимать	разница	между	возможный	вариант	чтобы	не	прогадать	с	производительность	сегодня	мы	в	заключаться	этот	разница	отображение	производительность	при	серверный	рендеринг	в	ответ	на	запрос	на	сервер	генерироваться	весь	страница	это	исключать	необходимость	дополнительный	запрос	дать	с	сторона	клиент	так	как	сервер	весь	работа	на	себя	прежде	чем	отправить	ответ	такой	подход	позволять	добиться	быстрый	один	отрисовка	и	один	содержательный	отрисовка	выполнение	логика	страница	и	рендеринг	на	сервер	позволять	избежать	отправка	клиент	большой	количество	что	приводить	к	меньший	время	до	интерактивность	и	это	логично	ведь	при	серверный	рендеринг	пользователь	отсылаться	только	текст	и	ссылка	этот	подход	хорошо	сработать	на	широкий	диапазон	устройство	и	сетевой	условие	а	также	открыть	возможность	для	интересный	браузерный	оптимизация	вроде	потоковый	парсинга	документ	при	использование	серверный	рендеринг	пользователь	не	нужно	ждать	завершение	работа	отнимать	ресурс	процессор	прежде	чем	они	смочь	начать	работать	с	сайт	даже	если	нельзя	избежать	использование	сторонний	серверный	рендеринг	позволять	уменьшить	количество	ваш	собственный	и	большой	для	всего	остальной	однако	у	это	подход	есть	один	существенный	недостаток	формирование	страница	на	сервер	занимать	время	что	мочь	привести	к	больший	время	до	первое	байт	ответ	на	вопрос	ли	серверный	рендеринг	для	мой	приложение	зависеть	от	тот	что	вы	сообщество	давно	дискутировать	на	тема	правильный	применение	серверный	рендеринг	против	клиентский	но	важный	помнить	что	для	один	страница	использовать	серверный	рендеринг	можно	а	для	другой	нет	некоторый	сайт	успешно	использовать	смешанный	рендеринг	генерировать	на	сервер	относительно	статический	лендинга	и	в	то	же	время	предварительно	загружать	для	страница	с	высокий	уровень	интерактивность	давать	возможность	быстрый	загрузиться	страница	который	большой	использовать	клиентский	рендеринг	многие	современный	фреймворка	библиотека	и	архитектура	позволять	рендерить	один	и	то	же	приложение	как	на	клиент	так	и	на	сервер	они	возможность	можно	использовать	и	для	серверный	рендеринг	однако	важный	отметить	что	архитектура	в	который	рендеринг	происходить	и	на	клиент	и	на	сервер	являться	отдельный	класс	решение	с	свой	характеристика	производительность	и	недостаток	пользователь	мочь	использовать	для	серверный	рендеринг	метод		или	решение	на	он	основа	вроде	пользователь	стоить	обратить	внимание	на	гайда	по	серверный	отображение	или	на	если	ваш	выбор	то	посмотреть	на	тем	не	менее	в	большинство	популярный	решение	присутствовать	какой	то	форма	гидратация	поэтому	прежде	чем	выбрать	инструмент	разузнать	большой	о	использовать	подход	статический	рендеринг	происходить	на	этап	сборка	и	предоставлять	быстрый	один	отрисовка	один	содержательный	отрисовка	и	время	до	интерактивность	при	условие	что	количество	клиентский	ограничить	в	отличие	от	серверный	рендеринг	здесь	добиться	стабильно	быстрый	время	до	первое	байт	так	как	код	страница	не	должный	генерироваться	на	лёт	как	правило	статический	рендеринг	подразумевать	предварительный	создание	отдельный	файл	для	каждый	поскольку	ответ	создать	заранее	статический	рендеринг	можно	развернуть	на	несколько	чтобы	воспользоваться	преимущество	кеширование	для	статический	рендеринг	существовать	самый	разный	решение	инструмент	вроде	разработать	так	чтобы	создавать	впечатление	динамический	рендеринг	другой	вроде	и	принимать	свой	статический	природа	и	предлагать	подход	основать	в	больший	степень	на	шаблон	но	у	такой	способ	рендеринг	есть	один	недостаток	необходимый	заранее	создать	файл	для	весь	возможный	это	мочь	быть	очень	сложно	или	даже	невыполнимый	если	вы	не	мочь	заранее	сказать	какой	возможный	или	если	у	вы	сайт	с	больший	количество	уникальный	страница	пользователь	мочь	быть	знакомый	с	статический	экспорт	или	весь	они	делать	использование	компонент	удобный	однако	важный	понимать	разница	между	статический	рендеринг	и	пререндеринг	статически	отрендеренный	страница	не	нуждаться	в	выполнение	большой	количество	клиентский	для	интерактивность	в	то	время	как	пререндеринг	улучшать	один	содержательный	отрисовка	одностраничный	приложение	который	должный	быть	загрузить	на	клиент	чтобы	страница	быть	действительно	интерактивный	если	вы	не	уверить	использоваться	ли	в	решение	статический	рендеринг	или	пререндеринг	то	попробовать	провести	тест	отключить	и	загрузить	создать	страница	у	статически	отрендеренный	страница	функциональность	по	больший	часть	остаться	на	место	у	пререндеренный	страница	мочь	сохраниться	базовый	функциональность	вроде	ссылка	однако	в	целое	страница	быть	не	интерактивный	также	можно	устроить	другой	проверка	замедлить	сеть	с	помощь	инструмент	разработчик	и	посмотреть	сколько	загружаться	прежде	чем	страница	становиться	интерактивный	пререндеринг	как	правило	требоваться	большой	для	интерактивность	и	обычно	этот	более	сложный	чем	подход	прогрессивный	улучшение	использовать	при	статический	рендеринг	серверный	отображение	не	панацея	он	динамический	природа	мочь	сопровождаться	множественный	вычислительный	затрата	многие	решение	с	серверный	отображение	не	использовать	технология	мочь	оттянуть	время	до	первое	байт	или	удвоить	количество	отправлять	дать	например	встроить	состояние	использовать	на	клиент		в	метод		мочь	быть	медленный	из	за	синхронность	и	однопоточность	для	эффективный	реализация	серверный	рендеринг	мочь	потребоваться	найти	решение	для	кеширование	компонент	разобраться	с	управление	потребление	память	применить	мемоизация	и	не	только	по	суть	вы	заново	обрабатывать	собирать	один	приложение	несколько	раз	на	сервер	и	на	клиент	тот	факт	что	серверный	рендеринг	мочь	показать	что	то	быстрый	вовсе	не	означать	что	нужно	проделать	маленький	вычислительный	работа	серверный	рендеринг	для	каждый	при	необходимость	но	такой	подход	мочь	работать	медленный	чем	простой	отправка	статический	контент	если	вы	готовый	поработать	дополнительно	то	с	помощь	связка	серверный	рендеринг	с	кеширование	вы	смочь	сильно	уменьшить	время	рендеринг	преимущество	серверный	рендеринг	являться	возможность	извлекать	большой	актуальный	дать	и	отвечать	на	более	полный	список	запрос	чем	это	возможно	при	статический	рендеринг	персонализировать	страница	яркий	пример	запрос	который	не	очень	хорошо	ладить	с	статический	рендеринг	клиентский	рендеринг	подразумевать	рендеринг	страница	прямо	в	браузер	с	помощь	весь	логика	получение	дать	шаблонизация	и	маршрутизация	обрабатываться	на	клиент	а	не	на	сервер	при	такой	рендеринг	сложно	поддерживать	высокий	скорость	на	мобильный	устройство	можно	приблизиться	к	производительность	чистый	серверный	рендеринг	если	выполнять	минимум	работа	иметь	узкий	бюджет	для	и	доставлять	дать	с	минимальный	круговой	задержка	критический	скрипт	и	дать	можно	отправить	поздний	с	помощь	или		что	говорить	парсер	начать	работа	заранее	шаблон	вроде	достойный	внимание	потому	что	мочь	обеспечить	ощущение	мгновенный	первое	и	последующий	переход	между	страница	основной	недостаток	клиентский	рендеринг	заключаться	в	тот	что	количество	необходимый	обычно	увеличиваться	вместе	с	рост	приложение	ситуация	ухудшаться	с	подключение	новый	библиотека	полифиллов	и	прочее	сторонний	код	который	соревноваться	между	себя	за	вычислительный	мощность	и	часто	требовать	обработка	прежде	чем	содержимое	страница	можно	быть	отобразить	решение	с	клиентский	рендеринг	который	полагаться	на	большой	бандлый	стоить	разделение	код	и	ленивый	загрузка	только	то	что	вы	нужно	и	только	когда	это	для	решение	с	минимум	интерактивность	или	отсутствие	серверный	рендеринг	мочь	предоставить	более	масштабировать	решение	этот	проблема	если	вы	одностраничный	приложение	то	определить	основной	часть	пользовательский	интерфейс	который	использоваться	на	большинство	страница	вы	смочь	использовать	кеширование	оболочка	приложение	в	сочетание	с	это	дать	сильный	прирост	ощущать	производительность	при	повторный	посещение	универсальный	рендеринг	или	просто	пытаться	устранить	недостаток	серверный	и	клиентский	рендеринг	использовать	оба	подход	навигационный	запрос	вроде	полный	загрузка	или	перезагрузка	страница	обрабатываться	сервер	который	рендерита	приложение	в	затем	и	дать	использовать	для	рендеринг	встраиваться	в	итоговый	документ	при	правильный	реализация	время	один	содержательный	отрисовка	быть	как	при	серверный	рендеринг	а	повторный	рендеринг	быть	производиться	на	клиент	с	помощь	техника	называть	ре	гидратация	это	новое	решение	тем	не	менее	не	проблема	с	производительность	основной	недостаток	универсальный	рендеринг	с	регидратация	заключаться	в	тот	что	такой	подход	мочь	очень	негативно	повлиять	на	время	до	интерактивность	даже	при	улучшение	один	отрисовка	страница	часто	выглядеть	обманчивый	готовый	и	интерактивный	но	по	факт	не	мочь	никак	реагировать	на	действие	пользователь	до	выполнение	на	сторона	клиент	и	присоединение	обработчик	событие	это	мочь	занять	несколько	секунда	или	даже	минута	на	мобильный	устройство	возможно	вы	и	сам	сталкиваться	с	такой	страница	уже	какой	то	время	выглядеть	загрузить	но	нажатие	на	элемент	не	давать	эффект	это	сильно	удручать	ничто	не	происходить	почему	я	не	мочь	скроллить	из	за	проблема	регидратация	мочь	быть	худой	чем	отложить	интерактивность	для	тот	чтобы	клиентский	мочь	не	прибегать	к	новый	запрос	весь	дать	использовать	сервер	для	рендеринг	продолжить	работа	с	тот	место	где	прекратить	работа	сервер	текущий	решение	на	основа	универсальный	рендеринг	обычно	сериализовать	дать	для	интерфейс	в	документ	в	вид	содержимый	большой	количество	повторяться	информация	как	видеть	сервер	возвращать	описание	интерфейс	приложение	в	ответ	на	навигационный	запрос	а	вместе	с	он	и	исходный	дать	использовать	для	он	создание	и	полный	копия	реализация	интерфейс	который	затем	загружаться	на	клиент	интерфейс	становиться	интерактивный	только	после	загрузка	и	выполнение	метрика	производительность	реальный	сайт	использовать	универсальный	рендеринг	с	регидратация	показывать	что	он	крайне	не	рекомендоваться	использовать	в	конечный	итог	это	мочь	оказаться	не	удобный	для	пользователь	впрочем	на	универсальный	рендеринг	с	регидратация	есть	надежда	в	краткосрочный	перспектива	использование	только	универсальный	рендеринг	с	хорошо	кешировать	содержимое	мочь	уменьшить	задержка	время	до	первое	байт	выдавать	результат	схожий	с	пререндеринг	постепенный	прогрессивный	или	частичный	регидратация	мочь	быть	ключ	к	тот	что	этот	технология	стать	более	жизнеспособный	в	будущее	за	последний	несколько	год	в	область	серверный	рендеринг	появиться	ряд	новый	разработка	потоковый	серверный	рендеринг	позволять	посылать	фрагмент	который	браузер	мочь	постепенно	рендерить	по	мера	получение	это	мочь	дать	быстрый	один	отрисовка	так	как	пользователь	получать	разметка	быстрый	в	использование	асинхронный		вместо	синхронный		помочь	улучшить	производительность	за	прогрессивный	регидратация	также	стоить	следить	и	уже	работать	в	это	направление	при	такой	подход	отдельный	часть	сформировать	сервер	приложение	загружаться	постепенно	вместо	единоразов	инициализация	всего	приложение	как	это	делаться	сейчас	это	мочь	уменьшить	количество	необходимый	для	интерактивность	страница	так	как	клиентский	обновление	низкоприоритетный	часть	страница	можно	отложить	чтобы	предотвратить	блокировка	основный	поток	также	это	мочь	помочь	избежать	один	из	частый	проблема	регидратация	универсальный	рендеринг	когда	создать	на	сервер	дерево	уничтожаться	а	затем	сразу	перестраиваться	как	правило	из	за	тот	что	изначальный	синхронный	серверный	рендеринг	потребовать	дать	который	не	быть	готовый	возможно	в	ожидание	промисова	частичный	регидратация	оказаться	сложно	реализовать	данный	подход	являться	расширение	идея	прогрессивный	регидратация	где	отдельный	часть	компонента	отображение	дерево		который	должный	быть	прогрессивно	регидратировать	анализироваться	на	предмет	малый	или	отсутствовать	интерактивность	для	этот	в	основное	статический	часть	соответствующий	код	затем	преобразоваться	в	ссылка	и	декоративный	функциональность	уменьшать	отпечаток	на	сторона	клиент	почти	до	нуль	у	частичный	регидратация	есть	свой	недостаток	реализация	кеширование	мочь	оказаться	не	из	простой	а	клиентский	навигация	подразумевать	что	нельзя	быть	уверенный	что	сгенерировать	на	сервер	для	часть	приложение	быть	доступный	без	полный	загрузка	страница	если	вы	использовать	то	вы	мочь	заинтересовать	рендеринг	это	метод	при	который	использоваться	потоковый	серверный	рендеринг	для	начальный	не	навигация	а	затем	после	установка	рендерита	остальной	для	навигация	это	позволять	поддерживать	кешировать	компонента	и	шаблон	в	актуальный	состояние	и	возможность	использовать	навигация	для	рендеринг	новый	представление	в	тот	же	сеанс	данный	подход	работать	хороший	всего	когда	вы	мочь	использовать	один	и	тот	же	шаблон	и	код	маршрутизация	для	сервер	клиентский	страница	и	разработчик	часто	учитывать	влияние	при	выбор	стратегия	для	рендеринг	серверный	рендеринг	часто	выбирать	для	формирование	страница	с	который	поисковый	робот	мочь	легко	интерпретировать	поисковый	робот	мочь	выполнять	но	зачастую	в	они	механизм	рендеринг	страница	есть	ограничение	о	который	стоить	помнить	клиентский	рендеринг	мочь	сработать	но	не	без	дополнительный	тестирование	и	работа	в	последний	время	динамический	рендеринг	также	стать	вариант	который	стоить	рассмотреть	если	ваш	архитектура	сильно	полагаться	на	клиентский	в	случай	сомнение	использовать	инструмент	чтобы	убедиться	что	выбрать	подход	делать	именно	то	на	что	вы	рассчитывать	он	показывать	страница	такой	как	видеть	робот	а	также	найти	сериализовать	содержимое	после	выполнение	и	весь	ошибка	возникнуть	в	время	рендеринг	чем	выбрать	подход	для	рендеринг	подумать	о	узкий	место	ваш	проект	а	с	выбор	помочь	этот	инфографик	перевод	статья		только	самый	важный	новостив	успешно	подтвердить	свой	подписка	на	и	ждать	первое	письмо	оно	уже	совсем	скоро	и	обзор	самый	важный	из	мир	разработка	даже	не	нужно	переходить	по	ссылка	просто	прочитать	один	письмо	присылать	каждый	день	по	вечер	выглядеть	это	примерно	так		